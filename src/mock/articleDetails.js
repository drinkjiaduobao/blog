let articleDetails = {
    "code": 200,
    "msg": "查询博文资料成功！",
    "data": {
        "version": 0,
        "createTime": "2020-10-22 11:36:16",
        "modifyTime": null,
        "flag": true,
        "aid": 370,
        "uid": 10,
        "username": "西蒙牛",
        "title": "SpringBoot基础教程(十四)",
        "summary": "Spring Data JPA 入门案例",
        "mdcontent": "Spring Data JPA是Spring Data家族的一部分，可以轻松实现基于JPA的存储库。 此模块处理对基于JPA的数据访问层的增强支持。 它使构建使用数据访问技术的Spring驱动应用程序变得更加容易。\n\n在相当长的一段时间内，实现应用程序的数据访问层一直很麻烦。 必须编写太多样板代码来执行简单查询以及执行分页和审计。 Spring Data JPA旨在通过减少实际需要的工作量来显著改善数据访问层的实现。 作为开发人员，您编写repository接口，包括自定义查找器方法，Spring将自动提供实现。\n\nJpa、Hibernate、Spring Data Jpa三者之间的关系，如下图所示：\n\n![](http://img.simoniu.com/SpringBoot%E4%B9%8Bjpa%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B001.jpg)\n\n总的来说JPA是ORM规范，Hibernate、TopLink等是JPA规范的具体实现，这样的好处是开发者可以面向JPA规范进行持久层的开发，而底层的实现则是可以切换的。Spring Data Jpa则是在JPA之上添加另一层抽象（Repository层的实现），极大地简化持久层开发及ORM框架切换的成本。\n\n编写第一个Spring Data JPA案例。\n项目结构图如下：\n![](http://img.simoniu.com/SpringBoot%E4%B9%8Bjpa%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B002.jpg)\n\n实现步骤：\n\n**1.配置application.yml**\n```xml\n#yml格式配置文档范例\nserver:\n  #端口配置\n  port: 8080\n  #上下文\n  servlet:\n    context-path: /jpademo\n#数据源配置\nspring:\n  #使用自定义banner的配置\n  output:\n    ansi:\n      enabled: always\n  datasource:\n    url: jdbc:mysql://localhost:3306/springboot?useSSL=false&useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai\n    username: root\n    password: root\n    # 使用druid数据源\n    type: com.alibaba.druid.pool.DruidDataSource\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    filters: stat\n    maxActive: 500\n    initialSize: 1\n    maxWait: 60000\n    minIdle: 1\n    timeBetweenEvictionRunsMillis: 60000\n    minEvictableIdleTimeMillis: 300000\n    validationQuery: select 'x'\n    testWhileIdle: true\n    testOnBorrow: false\n    testOnReturn: false\n    poolPreparedStatements: true\n    maxOpenPreparedStatements: 20\n  jpa:\n    show-sql: true\n    properties:\n      hibernate:\n        #dialect: org.hibernate.dialect.MySQL5Dialect ,注意这个是不支持事务的方言。\n        dialect: org.hibernate.dialect.MySQL5InnoDBDialect\n        format_sql: true\n        #配置懒加载策略\n        enable_lazy_load_no_trans: true\n        hbm2ddl:\n          auto: update\n```\n\n**2.创建Students实体类**\n```java\npackage com.oracle.entity;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport javax.persistence.*;\nimport java.io.Serializable;\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Entity //表示这个类对应数据库中的一张表\npublic class Students implements Serializable,Cloneable {\n\n    //既然是表，就必须有主键\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY) //使用数据库默认的主键生成策略\n \n    private int sid; //主键\n    @Column(length = 20)  //规定学生的姓名不超过20个字符\n    private String sname; //姓名，默认是占用255个字符。\n    @Column(length = 2)\n    private String gender; //性别\n    @Column(length = 32)\n    private String date; //出生日期\n    private String school; //所在学校\n    private String major; //所学的专业\n    private boolean status; //状态  1：在籍  0：辍学\n}\n```\n\n**3.创建StudentsRepository业务逻辑接口。**\n```java\npackage com.oracle.repository;\nimport com.oracle.entity.Students;\nimport org.springframework.data.jpa.repository.JpaRepository;\npublic interface StudentsRepository extends JpaRepository<Students,Integer> {\n\n}\n\n```\n\n**4.创建StudentsService服务层接口和实现类**\n\nStudentsService.java\n```java\npackage com.oracle.service;\n\nimport com.oracle.entity.Students;\nimport java.util.List;\n\npublic interface StudentsService {\n    Students save(Students s); //保存一个学生对象；\n    Students queryStudentsBySid(Integer sid); //查询单个学生\n    void delete(int sid);\n    Students update(Students s);\n    List<Students> queryAllStudents(); //查询所有学生\n}\n```\nStudentsServiceImpl.java\n```java\npackage com.oracle.service.impl;\n\nimport com.oracle.entity.Students;\nimport com.oracle.repository.StudentsRepository;\nimport com.oracle.service.StudentsService;\nimport org.springframework.stereotype.Service;\nimport javax.annotation.Resource;\nimport java.util.List;\n\n@Service\npublic class StudentsServiceImpl implements StudentsService {\n\n    @Resource\n    private StudentsRepository studentsRepository;\n\n    @Override\n    public Students save(Students s) {\n        return studentsRepository.save(s);\n    }\n\n    @Override\n    public Students queryStudentsBySid(Integer sid) {\n        return studentsRepository.getOne(sid);\n    }\n\n    @Override\n    public void delete(int sid) {\n        studentsRepository.deleteById(sid);\n    }\n\n    @Override\n    public Students update(Students s) {\n        return studentsRepository.save(s);\n    }\n\n    @Override\n    public List<Students> queryAllStudents() {\n        return studentsRepository.findAll();\n    }\n}\n\n```\n\n**5.编写测试类，测试StudentsService接口里的各个方法。**\n\n```java\npackage com.oracle.service;\n\nimport com.oracle.entity.Students;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit4.SpringRunner;\nimport javax.annotation.Resource;\nimport java.util.List;\n\n@RunWith(SpringRunner.class)//指定Junit4使用Spring提供的测试环境\n@SpringBootTest\npublic class StudentsServiceTest {\n\n    @Resource\n    private StudentsService studentsService;\n\n    //测试保存单个学生对象\n    @Test\n    public void testSaveStudents(){\n        Students s = new Students();\n        s.setSname(\"东方不败\");\n        s.setGender(\"女\");\n        s.setSchool(\"黑木崖大学\");\n        s.setDate(\"2000-10-10\");\n        s.setMajor(\"葵花宝典\");\n        s.setStatus(true);\n        s = studentsService.save(s);\n        System.out.println(s);\n    }\n\n    @Test\n    public void testQueryStudentsBySid(){\n        //查询出东方不败。\n        Students s = studentsService.queryStudentsBySid(2);\n        System.out.println(s);\n    }\n\n    //更新学生资料\n    @Test\n    public void testUpdateStudents(){\n        //把东方不败的性别改为‘男’\n        Students s = studentsService.queryStudentsBySid(2);\n        s.setGender(\"男\");\n        studentsService.update(s);\n        System.out.println(s);\n    }\n\n    //查询所有学生\n    @Test\n    public void testQueryAllStudents(){\n        List<Students> studentsList = studentsService.queryAllStudents();\n        for(Students s: studentsList){\n            System.out.println(s);\n        }\n    }\n\n    //删除学生\n    @Test\n    public void testDeleteStudentsBySid(){\n        studentsService.delete(2);\n    }\n\n}\n\n```\n\n\n\n\n\n\n\n\n",
        "content": "<p>Spring Data JPA是Spring Data家族的一部分，可以轻松实现基于JPA的存储库。 此模块处理对基于JPA的数据访问层的增强支持。 它使构建使用数据访问技术的Spring驱动应用程序变得更加容易。</p>\n<p>在相当长的一段时间内，实现应用程序的数据访问层一直很麻烦。 必须编写太多样板代码来执行简单查询以及执行分页和审计。 Spring Data JPA旨在通过减少实际需要的工作量来显著改善数据访问层的实现。 作为开发人员，您编写repository接口，包括自定义查找器方法，Spring将自动提供实现。</p>\n<p>Jpa、Hibernate、Spring Data Jpa三者之间的关系，如下图所示：</p>\n<p><img src=\"http://img.simoniu.com/SpringBoot%E4%B9%8Bjpa%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B001.jpg\" alt=\"\" /></p>\n<p>总的来说JPA是ORM规范，Hibernate、TopLink等是JPA规范的具体实现，这样的好处是开发者可以面向JPA规范进行持久层的开发，而底层的实现则是可以切换的。Spring Data Jpa则是在JPA之上添加另一层抽象（Repository层的实现），极大地简化持久层开发及ORM框架切换的成本。</p>\n<p>编写第一个Spring Data JPA案例。<br />\n项目结构图如下：<br />\n<img src=\"http://img.simoniu.com/SpringBoot%E4%B9%8Bjpa%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B002.jpg\" alt=\"\" /></p>\n<p>实现步骤：</p>\n<p><strong>1.配置application.yml</strong></p>\n<pre><div class=\"hljs\"><code class=\"lang-xml\">#yml格式配置文档范例\nserver:\n  #端口配置\n  port: 8080\n  #上下文\n  servlet:\n    context-path: /jpademo\n#数据源配置\nspring:\n  #使用自定义banner的配置\n  output:\n    ansi:\n      enabled: always\n  datasource:\n    url: jdbc:mysql://localhost:3306/springboot?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai\n    username: root\n    password: root\n    # 使用druid数据源\n    type: com.alibaba.druid.pool.DruidDataSource\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    filters: stat\n    maxActive: 500\n    initialSize: 1\n    maxWait: 60000\n    minIdle: 1\n    timeBetweenEvictionRunsMillis: 60000\n    minEvictableIdleTimeMillis: 300000\n    validationQuery: select 'x'\n    testWhileIdle: true\n    testOnBorrow: false\n    testOnReturn: false\n    poolPreparedStatements: true\n    maxOpenPreparedStatements: 20\n  jpa:\n    show-sql: true\n    properties:\n      hibernate:\n        #dialect: org.hibernate.dialect.MySQL5Dialect ,注意这个是不支持事务的方言。\n        dialect: org.hibernate.dialect.MySQL5InnoDBDialect\n        format_sql: true\n        #配置懒加载策略\n        enable_lazy_load_no_trans: true\n        hbm2ddl:\n          auto: update\n</code></div></pre>\n<p><strong>2.创建Students实体类</strong></p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">package</span> com.oracle.entity;\n\n<span class=\"hljs-keyword\">import</span> lombok.AllArgsConstructor;\n<span class=\"hljs-keyword\">import</span> lombok.Data;\n<span class=\"hljs-keyword\">import</span> lombok.NoArgsConstructor;\n\n<span class=\"hljs-keyword\">import</span> javax.persistence.*;\n<span class=\"hljs-keyword\">import</span> java.io.Serializable;\n\n<span class=\"hljs-meta\">@Data</span>\n<span class=\"hljs-meta\">@NoArgsConstructor</span>\n<span class=\"hljs-meta\">@AllArgsConstructor</span>\n<span class=\"hljs-meta\">@Entity</span> <span class=\"hljs-comment\">//表示这个类对应数据库中的一张表</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Students</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Serializable</span>,<span class=\"hljs-title\">Cloneable</span> </span>{\n\n    <span class=\"hljs-comment\">//既然是表，就必须有主键</span>\n    <span class=\"hljs-meta\">@Id</span>\n    <span class=\"hljs-meta\">@GeneratedValue</span>(strategy = GenerationType.IDENTITY) <span class=\"hljs-comment\">//使用数据库默认的主键生成策略</span>\n \n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> sid; <span class=\"hljs-comment\">//主键</span>\n    <span class=\"hljs-meta\">@Column</span>(length = <span class=\"hljs-number\">20</span>)  <span class=\"hljs-comment\">//规定学生的姓名不超过20个字符</span>\n    <span class=\"hljs-keyword\">private</span> String sname; <span class=\"hljs-comment\">//姓名，默认是占用255个字符。</span>\n    <span class=\"hljs-meta\">@Column</span>(length = <span class=\"hljs-number\">2</span>)\n    <span class=\"hljs-keyword\">private</span> String gender; <span class=\"hljs-comment\">//性别</span>\n    <span class=\"hljs-meta\">@Column</span>(length = <span class=\"hljs-number\">32</span>)\n    <span class=\"hljs-keyword\">private</span> String date; <span class=\"hljs-comment\">//出生日期</span>\n    <span class=\"hljs-keyword\">private</span> String school; <span class=\"hljs-comment\">//所在学校</span>\n    <span class=\"hljs-keyword\">private</span> String major; <span class=\"hljs-comment\">//所学的专业</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">boolean</span> status; <span class=\"hljs-comment\">//状态  1：在籍  0：辍学</span>\n}\n</code></div></pre>\n<p><strong>3.创建StudentsRepository业务逻辑接口。</strong></p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">package</span> com.oracle.repository;\n<span class=\"hljs-keyword\">import</span> com.oracle.entity.Students;\n<span class=\"hljs-keyword\">import</span> org.springframework.data.jpa.repository.JpaRepository;\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">StudentsRepository</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">JpaRepository</span>&lt;<span class=\"hljs-title\">Students</span>,<span class=\"hljs-title\">Integer</span>&gt; </span>{\n\n}\n\n</code></div></pre>\n<p><strong>4.创建StudentsService服务层接口和实现类</strong></p>\n<p>StudentsService.java</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">package</span> com.oracle.service;\n\n<span class=\"hljs-keyword\">import</span> com.oracle.entity.Students;\n<span class=\"hljs-keyword\">import</span> java.util.List;\n\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">StudentsService</span> </span>{\n    <span class=\"hljs-function\">Students <span class=\"hljs-title\">save</span><span class=\"hljs-params\">(Students s)</span></span>; <span class=\"hljs-comment\">//保存一个学生对象；</span>\n    <span class=\"hljs-function\">Students <span class=\"hljs-title\">queryStudentsBySid</span><span class=\"hljs-params\">(Integer sid)</span></span>; <span class=\"hljs-comment\">//查询单个学生</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">delete</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> sid)</span></span>;\n    <span class=\"hljs-function\">Students <span class=\"hljs-title\">update</span><span class=\"hljs-params\">(Students s)</span></span>;\n    <span class=\"hljs-function\">List&lt;Students&gt; <span class=\"hljs-title\">queryAllStudents</span><span class=\"hljs-params\">()</span></span>; <span class=\"hljs-comment\">//查询所有学生</span>\n}\n</code></div></pre>\n<p>StudentsServiceImpl.java</p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">package</span> com.oracle.service.impl;\n\n<span class=\"hljs-keyword\">import</span> com.oracle.entity.Students;\n<span class=\"hljs-keyword\">import</span> com.oracle.repository.StudentsRepository;\n<span class=\"hljs-keyword\">import</span> com.oracle.service.StudentsService;\n<span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Service;\n<span class=\"hljs-keyword\">import</span> javax.annotation.Resource;\n<span class=\"hljs-keyword\">import</span> java.util.List;\n\n<span class=\"hljs-meta\">@Service</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">StudentsServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">StudentsService</span> </span>{\n\n    <span class=\"hljs-meta\">@Resource</span>\n    <span class=\"hljs-keyword\">private</span> StudentsRepository studentsRepository;\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Students <span class=\"hljs-title\">save</span><span class=\"hljs-params\">(Students s)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> studentsRepository.save(s);\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Students <span class=\"hljs-title\">queryStudentsBySid</span><span class=\"hljs-params\">(Integer sid)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> studentsRepository.getOne(sid);\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">delete</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> sid)</span> </span>{\n        studentsRepository.deleteById(sid);\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Students <span class=\"hljs-title\">update</span><span class=\"hljs-params\">(Students s)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> studentsRepository.save(s);\n    }\n\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> List&lt;Students&gt; <span class=\"hljs-title\">queryAllStudents</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> studentsRepository.findAll();\n    }\n}\n\n</code></div></pre>\n<p><strong>5.编写测试类，测试StudentsService接口里的各个方法。</strong></p>\n<pre><div class=\"hljs\"><code class=\"lang-java\"><span class=\"hljs-keyword\">package</span> com.oracle.service;\n\n<span class=\"hljs-keyword\">import</span> com.oracle.entity.Students;\n<span class=\"hljs-keyword\">import</span> org.junit.Test;\n<span class=\"hljs-keyword\">import</span> org.junit.runner.RunWith;\n<span class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;\n<span class=\"hljs-keyword\">import</span> org.springframework.test.context.junit4.SpringRunner;\n<span class=\"hljs-keyword\">import</span> javax.annotation.Resource;\n<span class=\"hljs-keyword\">import</span> java.util.List;\n\n<span class=\"hljs-meta\">@RunWith</span>(SpringRunner.class)<span class=\"hljs-comment\">//指定Junit4使用Spring提供的测试环境</span>\n<span class=\"hljs-meta\">@SpringBootTest</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">StudentsServiceTest</span> </span>{\n\n    <span class=\"hljs-meta\">@Resource</span>\n    <span class=\"hljs-keyword\">private</span> StudentsService studentsService;\n\n    <span class=\"hljs-comment\">//测试保存单个学生对象</span>\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testSaveStudents</span><span class=\"hljs-params\">()</span></span>{\n        Students s = <span class=\"hljs-keyword\">new</span> Students();\n        s.setSname(<span class=\"hljs-string\">\"东方不败\"</span>);\n        s.setGender(<span class=\"hljs-string\">\"女\"</span>);\n        s.setSchool(<span class=\"hljs-string\">\"黑木崖大学\"</span>);\n        s.setDate(<span class=\"hljs-string\">\"2000-10-10\"</span>);\n        s.setMajor(<span class=\"hljs-string\">\"葵花宝典\"</span>);\n        s.setStatus(<span class=\"hljs-keyword\">true</span>);\n        s = studentsService.save(s);\n        System.out.println(s);\n    }\n\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testQueryStudentsBySid</span><span class=\"hljs-params\">()</span></span>{\n        <span class=\"hljs-comment\">//查询出东方不败。</span>\n        Students s = studentsService.queryStudentsBySid(<span class=\"hljs-number\">2</span>);\n        System.out.println(s);\n    }\n\n    <span class=\"hljs-comment\">//更新学生资料</span>\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testUpdateStudents</span><span class=\"hljs-params\">()</span></span>{\n        <span class=\"hljs-comment\">//把东方不败的性别改为‘男’</span>\n        Students s = studentsService.queryStudentsBySid(<span class=\"hljs-number\">2</span>);\n        s.setGender(<span class=\"hljs-string\">\"男\"</span>);\n        studentsService.update(s);\n        System.out.println(s);\n    }\n\n    <span class=\"hljs-comment\">//查询所有学生</span>\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testQueryAllStudents</span><span class=\"hljs-params\">()</span></span>{\n        List&lt;Students&gt; studentsList = studentsService.queryAllStudents();\n        <span class=\"hljs-keyword\">for</span>(Students s: studentsList){\n            System.out.println(s);\n        }\n    }\n\n    <span class=\"hljs-comment\">//删除学生</span>\n    <span class=\"hljs-meta\">@Test</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">testDeleteStudentsBySid</span><span class=\"hljs-params\">()</span></span>{\n        studentsService.delete(<span class=\"hljs-number\">2</span>);\n    }\n\n}\n\n</code></div></pre>\n",
        "replyNumber": 0,
        "browseNumber": 100,
        "tags": "[\"javaee框架\"]",
        "type": "教程",
        "catalog": "java",
        "catalogName": "Java/框架"
    }
}

export default {
    'get|/getArticleDetails': articleDetails
}